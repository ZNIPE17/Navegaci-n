const int DIP1 = 2; //Interruptor 1 del DipSwitch
const int DIP2 = 3; //Interruptor 2 del DipSwitch
const int DIP3 = 4; //Interruptor 3 del DipSwitch
const int DIP4 = 5; //Interruptor 4 del DipSwitch

const int pinENA = 6; // Permite el control del motor A
const int pinIN1 = 7; // controla sentido del motor A
const int pinIN2 = 8; // controla sentido del motor A
const int pinIN3 = 9; // controla sentido del motor B
const int pinIN4 = 10; // controla sentido del motor B
const int pinENB = 11; // Permite el control del motor B

int velocidad=200;      //velocidad de giro

const int pinMotorA[3] = { pinENA, pinIN1, pinIN2 };
const int pinMotorB[3] = { pinENB, pinIN3, pinIN4 };

int freno = 0;
int movimiento = 0;
int giro = 0;
int espiral = 0;

void setup() {
  Serial.begin(9600);   //iniciar puerto serie
  pinMode(DIP1, INPUT); //definir DIP1 como entrada
  pinMode(DIP2, INPUT); //definir DIP2 como entrada
  pinMode(DIP3, INPUT); //definir DIP3 como entrada
  pinMode(DIP4, INPUT); //definir DIP4 como entrada

  pinMode(pinIN1, OUTPUT); //definir pinIN1 como salida
  pinMode(pinIN2, OUTPUT); //definir pinIN2 como salida
  pinMode(pinENA, OUTPUT); //definir pinENA como salida
  pinMode(pinIN3, OUTPUT); //definir pinIN3 como salida
  pinMode(pinIN4, OUTPUT); //definir pinIN4 como salida
  pinMode(pinENB, OUTPUT); //definir pinENB como salida

  
}
void loop(){
  freno = digitalRead(DIP1);  //lectura digital de pin
  movimiento = digitalRead(DIP2);  //lectura digital de pin
  giro = digitalRead(DIP3);  //lectura digital de pin
  espiral = digitalRead(DIP4);  //lectura digital de pin

  int modo[4] = { freno, movimiento, giro, espiral}; //Agrupamos los valores en un arreglo

  int estado = movimientoMotores(modo); //Emplemos el arreglo como argumento de la función movimientoMotores

  switch(estado)
  {
    case 1:
      //Freno activado
      Serial.println("El freno está activo");
      fullStop(pinMotorA, pinMotorB);
      break;
      
    case 2:
      //Movimiento hacia delante y hacia atrás
      
      Serial.println("El robot se mueve haca adelante y atrás");

      velocidad = 200;
      
      moveForward(pinMotorA, velocidad);
      moveForward(pinMotorB, velocidad);
      
      
      break;
      
    case 3:
      //Giro
      Serial.println("El robot está girando");

      giroDerecha(pinMotorA, pinMotorB);
      delay(1000);
      giroIzquierda(pinMotorA, pinMotorB);
      delay(1000);
      
      break;

    case 4:
      //Espiral
      Serial.println("El robot se mueve en espiral");
      break;

    default:
      //Aqui no llega
      break;
  }
  delay(1000);
}

int movimientoMotores(int estado[4])
{
  int a;
  if( estado[0] == 0)
  {
    a = 1; //Estado 1: Freno
  }

  else if( estado[0] == 1 && estado[1] == 1 && estado[2] == 0 && estado[3] == 0 )
  {
    a = 2; //Estado 2: Adelante-atrás
  }

  else if( estado[0] == 1 && estado[1] == 0 && estado[2] == 1 && estado[3] == 0 )
  {
    a = 3; // Estado3: Giro
  }

  else if( estado[0] == 1 && estado[1] == 0 && estado[2] == 0 && estado[3] == 1 )
  {
    a = 4; //Estado 4 : Espiral
  }

  else
  {
    a = 1; //Estado no definido, se obliga a frenar
  }

  return a;
  
}

void fullStop(const int pinMotor1[3], const int pinMotor2[3])
{
   digitalWrite(pinMotor1[1], LOW);
   digitalWrite(pinMotor1[2], LOW);
   digitalWrite(pinMotor2[1], LOW);
   digitalWrite(pinMotor2[2], LOW);

   analogWrite(pinMotor1[0], 0);
   analogWrite(pinMotor2[0], 0);
}

void moveForward(const int pinMotor[3], int speed)
{
   digitalWrite(pinMotor[1], HIGH);
   digitalWrite(pinMotor[2], LOW);

   analogWrite(pinMotor[0], speed);
}

void moveBackward(const int pinMotor[3], int speed)
{
   digitalWrite(pinMotor[1], LOW);
   digitalWrite(pinMotor[2], HIGH);

   analogWrite(pinMotor[0], speed);
}

void giroDerecha(const int pinMotor1[3], const int pinMotor2[3])
{
  moveForward(pinMotor1, 200);
  moveBackward(pinMotor2, 100);
}

void giroIzquierda(const int pinMotor1[3], const int pinMotor2[3])
{
  moveForward(pinMotor1, 100);
  moveBackward(pinMotor2, 200);
}
